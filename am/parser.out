Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> all
Rule 1     all -> am
Rule 2     all -> all am
Rule 3     am -> name specif trans
Rule 4     name -> NEW STRING INT
Rule 5     specif -> start
Rule 6     specif -> start ends
Rule 7     specif -> start ends s_error
Rule 8     start -> START STATE
Rule 9     ends -> end
Rule 10    ends -> ends end
Rule 11    end -> END STATE STRING
Rule 12    s_error -> UNDEFINED STATE STRING
Rule 13    trans -> state_tr
Rule 14    trans -> trans state_tr
Rule 15    state_tr -> full_transition transition_list
Rule 16    full_transition -> FROM STATE transition
Rule 17    transition -> reads writes moves STATE
Rule 18    transition -> reads writes moves
Rule 19    transition_list -> transition_list transition
Rule 20    transition_list -> empty
Rule 21    empty -> <empty>
Rule 22    reads -> letters
Rule 23    reads -> reads COMMA letters
Rule 24    moves -> MOVE
Rule 25    moves -> moves COMMA MOVE
Rule 26    letters -> LETTER
Rule 27    letters -> letters PIPE LETTER
Rule 28    writes -> reads
Rule 29    writes -> empty

Terminals, with rules where they appear

COMMA                : 23 25
END                  : 11
FROM                 : 16
INT                  : 4
LETTER               : 26 27
MOVE                 : 24 25
NEW                  : 4
PIPE                 : 27
START                : 8
STATE                : 8 11 12 16 17
STRING               : 4 11 12
UNDEFINED            : 12
error                : 

Nonterminals, with rules where they appear

all                  : 2 0
am                   : 1 2
empty                : 20 29
end                  : 9 10
ends                 : 6 7 10
full_transition      : 15
letters              : 22 23 27
moves                : 17 18 25
name                 : 3
reads                : 17 18 23 28
s_error              : 7
specif               : 3
start                : 5 6 7
state_tr             : 13 14
trans                : 3 14
transition           : 16 19
transition_list      : 15 19
writes               : 17 18

Parsing method: LALR

state 0

    (0) S' -> . all
    (1) all -> . am
    (2) all -> . all am
    (3) am -> . name specif trans
    (4) name -> . NEW STRING INT

    NEW             shift and go to state 4

    all                            shift and go to state 1
    am                             shift and go to state 2
    name                           shift and go to state 3

state 1

    (0) S' -> all .
    (2) all -> all . am
    (3) am -> . name specif trans
    (4) name -> . NEW STRING INT

    NEW             shift and go to state 4

    am                             shift and go to state 5
    name                           shift and go to state 3

state 2

    (1) all -> am .

    NEW             reduce using rule 1 (all -> am .)
    $end            reduce using rule 1 (all -> am .)


state 3

    (3) am -> name . specif trans
    (5) specif -> . start
    (6) specif -> . start ends
    (7) specif -> . start ends s_error
    (8) start -> . START STATE

    START           shift and go to state 8

    specif                         shift and go to state 6
    start                          shift and go to state 7

state 4

    (4) name -> NEW . STRING INT

    STRING          shift and go to state 9


state 5

    (2) all -> all am .

    NEW             reduce using rule 2 (all -> all am .)
    $end            reduce using rule 2 (all -> all am .)


state 6

    (3) am -> name specif . trans
    (13) trans -> . state_tr
    (14) trans -> . trans state_tr
    (15) state_tr -> . full_transition transition_list
    (16) full_transition -> . FROM STATE transition

    FROM            shift and go to state 13

    trans                          shift and go to state 10
    state_tr                       shift and go to state 11
    full_transition                shift and go to state 12

state 7

    (5) specif -> start .
    (6) specif -> start . ends
    (7) specif -> start . ends s_error
    (9) ends -> . end
    (10) ends -> . ends end
    (11) end -> . END STATE STRING

    FROM            reduce using rule 5 (specif -> start .)
    END             shift and go to state 16

    ends                           shift and go to state 14
    end                            shift and go to state 15

state 8

    (8) start -> START . STATE

    STATE           shift and go to state 17


state 9

    (4) name -> NEW STRING . INT

    INT             shift and go to state 18


state 10

    (3) am -> name specif trans .
    (14) trans -> trans . state_tr
    (15) state_tr -> . full_transition transition_list
    (16) full_transition -> . FROM STATE transition

    NEW             reduce using rule 3 (am -> name specif trans .)
    $end            reduce using rule 3 (am -> name specif trans .)
    FROM            shift and go to state 13

    state_tr                       shift and go to state 19
    full_transition                shift and go to state 12

state 11

    (13) trans -> state_tr .

    FROM            reduce using rule 13 (trans -> state_tr .)
    NEW             reduce using rule 13 (trans -> state_tr .)
    $end            reduce using rule 13 (trans -> state_tr .)


state 12

    (15) state_tr -> full_transition . transition_list
    (19) transition_list -> . transition_list transition
    (20) transition_list -> . empty
    (21) empty -> .

    LETTER          reduce using rule 21 (empty -> .)
    FROM            reduce using rule 21 (empty -> .)
    NEW             reduce using rule 21 (empty -> .)
    $end            reduce using rule 21 (empty -> .)

    transition_list                shift and go to state 20
    empty                          shift and go to state 21

state 13

    (16) full_transition -> FROM . STATE transition

    STATE           shift and go to state 22


state 14

    (6) specif -> start ends .
    (7) specif -> start ends . s_error
    (10) ends -> ends . end
    (12) s_error -> . UNDEFINED STATE STRING
    (11) end -> . END STATE STRING

    FROM            reduce using rule 6 (specif -> start ends .)
    UNDEFINED       shift and go to state 25
    END             shift and go to state 16

    s_error                        shift and go to state 23
    end                            shift and go to state 24

state 15

    (9) ends -> end .

    UNDEFINED       reduce using rule 9 (ends -> end .)
    END             reduce using rule 9 (ends -> end .)
    FROM            reduce using rule 9 (ends -> end .)


state 16

    (11) end -> END . STATE STRING

    STATE           shift and go to state 26


state 17

    (8) start -> START STATE .

    END             reduce using rule 8 (start -> START STATE .)
    FROM            reduce using rule 8 (start -> START STATE .)


state 18

    (4) name -> NEW STRING INT .

    START           reduce using rule 4 (name -> NEW STRING INT .)


state 19

    (14) trans -> trans state_tr .

    FROM            reduce using rule 14 (trans -> trans state_tr .)
    NEW             reduce using rule 14 (trans -> trans state_tr .)
    $end            reduce using rule 14 (trans -> trans state_tr .)


state 20

    (15) state_tr -> full_transition transition_list .
    (19) transition_list -> transition_list . transition
    (17) transition -> . reads writes moves STATE
    (18) transition -> . reads writes moves
    (22) reads -> . letters
    (23) reads -> . reads COMMA letters
    (26) letters -> . LETTER
    (27) letters -> . letters PIPE LETTER

    FROM            reduce using rule 15 (state_tr -> full_transition transition_list .)
    NEW             reduce using rule 15 (state_tr -> full_transition transition_list .)
    $end            reduce using rule 15 (state_tr -> full_transition transition_list .)
    LETTER          shift and go to state 30

    transition                     shift and go to state 27
    reads                          shift and go to state 28
    letters                        shift and go to state 29

state 21

    (20) transition_list -> empty .

    LETTER          reduce using rule 20 (transition_list -> empty .)
    FROM            reduce using rule 20 (transition_list -> empty .)
    NEW             reduce using rule 20 (transition_list -> empty .)
    $end            reduce using rule 20 (transition_list -> empty .)


state 22

    (16) full_transition -> FROM STATE . transition
    (17) transition -> . reads writes moves STATE
    (18) transition -> . reads writes moves
    (22) reads -> . letters
    (23) reads -> . reads COMMA letters
    (26) letters -> . LETTER
    (27) letters -> . letters PIPE LETTER

    LETTER          shift and go to state 30

    transition                     shift and go to state 31
    reads                          shift and go to state 28
    letters                        shift and go to state 29

state 23

    (7) specif -> start ends s_error .

    FROM            reduce using rule 7 (specif -> start ends s_error .)


state 24

    (10) ends -> ends end .

    UNDEFINED       reduce using rule 10 (ends -> ends end .)
    END             reduce using rule 10 (ends -> ends end .)
    FROM            reduce using rule 10 (ends -> ends end .)


state 25

    (12) s_error -> UNDEFINED . STATE STRING

    STATE           shift and go to state 32


state 26

    (11) end -> END STATE . STRING

    STRING          shift and go to state 33


state 27

    (19) transition_list -> transition_list transition .

    LETTER          reduce using rule 19 (transition_list -> transition_list transition .)
    FROM            reduce using rule 19 (transition_list -> transition_list transition .)
    NEW             reduce using rule 19 (transition_list -> transition_list transition .)
    $end            reduce using rule 19 (transition_list -> transition_list transition .)


state 28

    (17) transition -> reads . writes moves STATE
    (18) transition -> reads . writes moves
    (23) reads -> reads . COMMA letters
    (28) writes -> . reads
    (29) writes -> . empty
    (22) reads -> . letters
    (23) reads -> . reads COMMA letters
    (21) empty -> .
    (26) letters -> . LETTER
    (27) letters -> . letters PIPE LETTER

    COMMA           shift and go to state 36
    MOVE            reduce using rule 21 (empty -> .)
    LETTER          shift and go to state 30

    reads                          shift and go to state 34
    writes                         shift and go to state 35
    letters                        shift and go to state 29
    empty                          shift and go to state 37

state 29

    (22) reads -> letters .
    (27) letters -> letters . PIPE LETTER

    COMMA           reduce using rule 22 (reads -> letters .)
    LETTER          reduce using rule 22 (reads -> letters .)
    MOVE            reduce using rule 22 (reads -> letters .)
    PIPE            shift and go to state 38


state 30

    (26) letters -> LETTER .

    PIPE            reduce using rule 26 (letters -> LETTER .)
    COMMA           reduce using rule 26 (letters -> LETTER .)
    LETTER          reduce using rule 26 (letters -> LETTER .)
    MOVE            reduce using rule 26 (letters -> LETTER .)


state 31

    (16) full_transition -> FROM STATE transition .

    LETTER          reduce using rule 16 (full_transition -> FROM STATE transition .)
    FROM            reduce using rule 16 (full_transition -> FROM STATE transition .)
    NEW             reduce using rule 16 (full_transition -> FROM STATE transition .)
    $end            reduce using rule 16 (full_transition -> FROM STATE transition .)


state 32

    (12) s_error -> UNDEFINED STATE . STRING

    STRING          shift and go to state 39


state 33

    (11) end -> END STATE STRING .

    UNDEFINED       reduce using rule 11 (end -> END STATE STRING .)
    END             reduce using rule 11 (end -> END STATE STRING .)
    FROM            reduce using rule 11 (end -> END STATE STRING .)


state 34

    (28) writes -> reads .
    (23) reads -> reads . COMMA letters

    MOVE            reduce using rule 28 (writes -> reads .)
    COMMA           shift and go to state 36


state 35

    (17) transition -> reads writes . moves STATE
    (18) transition -> reads writes . moves
    (24) moves -> . MOVE
    (25) moves -> . moves COMMA MOVE

    MOVE            shift and go to state 41

    moves                          shift and go to state 40

state 36

    (23) reads -> reads COMMA . letters
    (26) letters -> . LETTER
    (27) letters -> . letters PIPE LETTER

    LETTER          shift and go to state 30

    letters                        shift and go to state 42

state 37

    (29) writes -> empty .

    MOVE            reduce using rule 29 (writes -> empty .)


state 38

    (27) letters -> letters PIPE . LETTER

    LETTER          shift and go to state 43


state 39

    (12) s_error -> UNDEFINED STATE STRING .

    FROM            reduce using rule 12 (s_error -> UNDEFINED STATE STRING .)


state 40

    (17) transition -> reads writes moves . STATE
    (18) transition -> reads writes moves .
    (25) moves -> moves . COMMA MOVE

    STATE           shift and go to state 44
    LETTER          reduce using rule 18 (transition -> reads writes moves .)
    FROM            reduce using rule 18 (transition -> reads writes moves .)
    NEW             reduce using rule 18 (transition -> reads writes moves .)
    $end            reduce using rule 18 (transition -> reads writes moves .)
    COMMA           shift and go to state 45


state 41

    (24) moves -> MOVE .

    STATE           reduce using rule 24 (moves -> MOVE .)
    COMMA           reduce using rule 24 (moves -> MOVE .)
    LETTER          reduce using rule 24 (moves -> MOVE .)
    FROM            reduce using rule 24 (moves -> MOVE .)
    NEW             reduce using rule 24 (moves -> MOVE .)
    $end            reduce using rule 24 (moves -> MOVE .)


state 42

    (23) reads -> reads COMMA letters .
    (27) letters -> letters . PIPE LETTER

    COMMA           reduce using rule 23 (reads -> reads COMMA letters .)
    LETTER          reduce using rule 23 (reads -> reads COMMA letters .)
    MOVE            reduce using rule 23 (reads -> reads COMMA letters .)
    PIPE            shift and go to state 38


state 43

    (27) letters -> letters PIPE LETTER .

    PIPE            reduce using rule 27 (letters -> letters PIPE LETTER .)
    COMMA           reduce using rule 27 (letters -> letters PIPE LETTER .)
    LETTER          reduce using rule 27 (letters -> letters PIPE LETTER .)
    MOVE            reduce using rule 27 (letters -> letters PIPE LETTER .)


state 44

    (17) transition -> reads writes moves STATE .

    LETTER          reduce using rule 17 (transition -> reads writes moves STATE .)
    FROM            reduce using rule 17 (transition -> reads writes moves STATE .)
    NEW             reduce using rule 17 (transition -> reads writes moves STATE .)
    $end            reduce using rule 17 (transition -> reads writes moves STATE .)


state 45

    (25) moves -> moves COMMA . MOVE

    MOVE            shift and go to state 46


state 46

    (25) moves -> moves COMMA MOVE .

    STATE           reduce using rule 25 (moves -> moves COMMA MOVE .)
    COMMA           reduce using rule 25 (moves -> moves COMMA MOVE .)
    LETTER          reduce using rule 25 (moves -> moves COMMA MOVE .)
    FROM            reduce using rule 25 (moves -> moves COMMA MOVE .)
    NEW             reduce using rule 25 (moves -> moves COMMA MOVE .)
    $end            reduce using rule 25 (moves -> moves COMMA MOVE .)

