
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA END FROM INT LETTER MOVE NEW PIPE START STATE STRING UNDEFINED\n    all : am\n        | all am\n    \n    am : name specif trans\n    \n    name : NEW STRING INT\n    \n    specif : start\n           | start ends\n           | start ends s_error\n    \n    start : START STATE\n    \n    ends : end\n         | ends end\n    \n    end : END STATE STRING\n    s_error : UNDEFINED STATE STRING\n    \n    trans : state_tr\n    \n    trans : trans state_tr\n    \n    state_tr : full_transition transition_list\n    \n    full_transition : FROM STATE transition\n    \n    transition : reads writes moves STATE\n    transition : reads writes moves\n    \n    transition_list : transition_list transition\n                    | empty\n    empty :\n    reads : letters\n          | reads COMMA letters\n    moves : MOVE\n          | moves COMMA MOVE\n    letters : LETTER\n          | letters PIPE LETTER\n    \n    writes : reads\n           | empty\n    '
    
_lr_action_items = {'NEW':([0,1,2,5,10,11,12,19,20,21,27,31,40,41,44,46,],[4,4,-1,-2,-3,-13,-21,-14,-15,-20,-19,-16,-18,-24,-17,-25,]),'$end':([1,2,5,10,11,12,19,20,21,27,31,40,41,44,46,],[0,-1,-2,-3,-13,-21,-14,-15,-20,-19,-16,-18,-24,-17,-25,]),'START':([3,18,],[8,-4,]),'STRING':([4,26,32,],[9,33,39,]),'FROM':([6,7,10,11,12,14,15,17,19,20,21,23,24,27,31,33,39,40,41,44,46,],[13,-5,13,-13,-21,-6,-9,-8,-14,-15,-20,-7,-10,-19,-16,-11,-12,-18,-24,-17,-25,]),'END':([7,14,15,17,24,33,],[16,16,-9,-8,-10,-11,]),'STATE':([8,13,16,25,40,41,46,],[17,22,26,32,44,-24,-25,]),'INT':([9,],[18,]),'LETTER':([12,20,21,22,27,28,29,30,31,36,38,40,41,42,43,44,46,],[-21,30,-20,30,-19,30,-22,-26,-16,30,43,-18,-24,-23,-27,-17,-25,]),'UNDEFINED':([14,15,24,33,],[25,-9,-10,-11,]),'COMMA':([28,29,30,34,40,41,42,43,46,],[36,-22,-26,36,45,-24,-23,-27,-25,]),'MOVE':([28,29,30,34,35,37,42,43,45,],[-21,-22,-26,-28,41,-29,-23,-27,46,]),'PIPE':([29,30,42,43,],[38,-26,38,-27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'all':([0,],[1,]),'am':([0,1,],[2,5,]),'name':([0,1,],[3,3,]),'specif':([3,],[6,]),'start':([3,],[7,]),'trans':([6,],[10,]),'state_tr':([6,10,],[11,19,]),'full_transition':([6,10,],[12,12,]),'ends':([7,],[14,]),'end':([7,14,],[15,24,]),'transition_list':([12,],[20,]),'empty':([12,28,],[21,37,]),'s_error':([14,],[23,]),'transition':([20,22,],[27,31,]),'reads':([20,22,28,],[28,28,34,]),'letters':([20,22,28,36,],[29,29,29,42,]),'writes':([28,],[35,]),'moves':([35,],[40,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> all","S'",1,None,None,None),
  ('all -> am','all',1,'p_all','am_parser.py',49),
  ('all -> all am','all',2,'p_all','am_parser.py',50),
  ('am -> name specif trans','am',3,'p_am','am_parser.py',61),
  ('name -> NEW STRING INT','name',3,'p_name','am_parser.py',76),
  ('specif -> start','specif',1,'p_specif','am_parser.py',83),
  ('specif -> start ends','specif',2,'p_specif','am_parser.py',84),
  ('specif -> start ends s_error','specif',3,'p_specif','am_parser.py',85),
  ('start -> START STATE','start',2,'p_start','am_parser.py',97),
  ('ends -> end','ends',1,'p_ends','am_parser.py',104),
  ('ends -> ends end','ends',2,'p_ends','am_parser.py',105),
  ('end -> END STATE STRING','end',3,'p_end','am_parser.py',118),
  ('s_error -> UNDEFINED STATE STRING','s_error',3,'p_end','am_parser.py',119),
  ('trans -> state_tr','trans',1,'p_am_1','am_parser.py',126),
  ('trans -> trans state_tr','trans',2,'p_am_2','am_parser.py',133),
  ('state_tr -> full_transition transition_list','state_tr',2,'p_state','am_parser.py',144),
  ('full_transition -> FROM STATE transition','full_transition',3,'p_full_transition','am_parser.py',152),
  ('transition -> reads writes moves STATE','transition',4,'p_transition','am_parser.py',159),
  ('transition -> reads writes moves','transition',3,'p_transition','am_parser.py',160),
  ('transition_list -> transition_list transition','transition_list',2,'p_transition_list','am_parser.py',171),
  ('transition_list -> empty','transition_list',1,'p_transition_list','am_parser.py',172),
  ('empty -> <empty>','empty',0,'p_empty','am_parser.py',182),
  ('reads -> letters','reads',1,'p_reads','am_parser.py',188),
  ('reads -> reads COMMA letters','reads',3,'p_reads','am_parser.py',189),
  ('moves -> MOVE','moves',1,'p_reads','am_parser.py',190),
  ('moves -> moves COMMA MOVE','moves',3,'p_reads','am_parser.py',191),
  ('letters -> LETTER','letters',1,'p_reads','am_parser.py',192),
  ('letters -> letters PIPE LETTER','letters',3,'p_reads','am_parser.py',193),
  ('writes -> reads','writes',1,'p_writes','am_parser.py',203),
  ('writes -> empty','writes',1,'p_writes','am_parser.py',204),
]
